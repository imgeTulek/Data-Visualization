<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Choropleth Map</title>
  <script src="https://d3js.org/d3.v6.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <style>
    .county {
      stroke: #fff;
      stroke-width: 0.5;
    }
    .legend rect {
      stroke: #000;
      stroke-width: 1;
    }
    #tooltip {
      position: absolute;
      background-color: rgba(255, 255, 255, 0.8);
      border: 1px solid #000;
      padding: 5px;
      pointer-events: none;
      opacity: 0;
    }
  </style>
</head>
<body>
  <h1 id="title">US Education Choropleth Map</h1>
  <p id="description">Percentage of adults age 25 and older with a bachelor's degree or higher (2010-2014)</p>
  <svg id="map" width="960" height="600"></svg>
  <div id="tooltip"></div>

  <script>
    const width = 960;
    const height = 600;

    const svg = d3.select("#map");

    const tooltip = d3.select("#tooltip");

    const colorScale = d3.scaleThreshold()
      .domain([10, 20, 30, 40, 50, 60])
      .range(d3.schemeBlues[7]);

    const path = d3.geoPath();

    const educationUrl = "https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json";
    const countiesUrl = "https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json";

    Promise.all([
      d3.json(educationUrl),
      d3.json(countiesUrl)
    ]).then(([educationData, us]) => {
      const educationMap = new Map(educationData.map(d => [d.fips, d]));

      svg.append("g")
        .selectAll("path")
        .data(topojson.feature(us, us.objects.counties).features)
        .enter().append("path")
        .attr("class", "county")
        .attr("d", path)
        .attr("fill", d => {
          const eduData = educationMap.get(d.id);
          return eduData ? colorScale(eduData.bachelorsOrHigher) : "#ccc";
        })
        .attr("data-fips", d => d.id)
        .attr("data-education", d => {
          const eduData = educationMap.get(d.id);
          return eduData ? eduData.bachelorsOrHigher : 0;
        })
        .on("mouseover", (event, d) => {
          const eduData = educationMap.get(d.id);
          tooltip.style("opacity", 1)
            .style("left", (event.pageX + 10) + "px")
            .style("top", (event.pageY - 10) + "px")
            .attr("data-education", eduData ? eduData.bachelorsOrHigher : 0)
            .html(`${eduData.area_name}, ${eduData.state}: ${eduData.bachelorsOrHigher}%`);
        })
        .on("mouseout", () => {
          tooltip.style("opacity", 0);
        });

      const legend = svg.append("g")
        .attr("id", "legend")
        .attr("transform", `translate(600,40)`);

      const legendData = colorScale.range().map(color => {
        const d = colorScale.invertExtent(color);
        if (!d[0]) d[0] = 0;
        return d;
      });

      legend.selectAll("rect")
        .data(legendData)
        .enter().append("rect")
        .attr("x", (d, i) => i * 30)
        .attr("y", 0)
        .attr("width", 30)
        .attr("height", 10)
        .attr("fill", d => colorScale(d[0]));

      legend.selectAll("text")
        .data(legendData)
        .enter().append("text")
        .attr("x", (d, i) => i * 30)
        .attr("y", 25)
        .text(d => Math.round(d[0]));
    });
  </script>
</body>
</html>
