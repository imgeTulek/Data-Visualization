<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Heat Map</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
        }
        svg {
            margin: auto;
            display: block;
        }
        .cell {
            stroke: #ffffff;
            stroke-width: 0.5;
        }
        #tooltip {
            position: absolute;
            background-color: white;
            border: 1px solid black;
            padding: 5px;
            display: none;
        }
        .legend {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1 id="title">Global Temperature Heat Map</h1>
    <h2 id="description">1754 - 2015: Monthly Global Land-Surface Temperature</h2>
    <div id="tooltip"></div>
    <svg></svg>
    <div id="legend"></div>

    <script>
        const url = "https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json";

        fetch(url)
            .then(response => response.json())
            .then(data => createHeatMap(data));

        function createHeatMap(data) {
            const baseTemperature = data.baseTemperature;
            const dataset = data.monthlyVariance;

            const width = 1000;
            const height = 500;
            const padding = 60;
            const cellHeight = (height - 2 * padding) / 12;

            const years = dataset.map(d => d.year);
            const uniqueYears = [...new Set(years)];
            const cellWidth = (width - 2 * padding) / uniqueYears.length;

            const svg = d3.select("svg")
                .attr("width", width)
                .attr("height", height);

            const xScale = d3.scaleBand()
                .domain(uniqueYears)
                .range([padding, width - padding]);

            const yScale = d3.scaleBand()
                .domain([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
                .range([padding, height - padding]);

            const colorScale = d3.scaleSequential()
                .interpolator(d3.interpolateCool)
                .domain(d3.extent(dataset, d => d.variance));

            const xAxis = d3.axisBottom(xScale).tickValues(uniqueYears.filter(year => year % 10 === 0));

            const yAxis = d3.axisLeft(yScale).tickFormat(month => {
                const date = new Date(0);
                date.setUTCMonth(month - 1);
                return d3.timeFormat("%B")(date);
            });

            svg.append("g")
                .attr("id", "x-axis")
                .attr("transform", `translate(0, ${height - padding})`)
                .call(xAxis);

            svg.append("g")
                .attr("id", "y-axis")
                .attr("transform", `translate(${padding}, 0)`)
                .call(yAxis);

            svg.selectAll(".cell")
                .data(dataset)
                .enter()
                .append("rect")
                .attr("class", "cell")
                .attr("x", d => xScale(d.year))
                .attr("y", d => yScale(d.month))
                .attr("width", cellWidth)
                .attr("height", cellHeight)
                .attr("data-month", d => d.month - 1)
                .attr("data-year", d => d.year)
                .attr("data-temp", d => baseTemperature + d.variance)
                .attr("fill", d => colorScale(d.variance))
                .on("mouseover", (event, d) => {
                    const tooltip = d3.select("#tooltip");
                    tooltip.style("display", "block")
                        .style("left", event.pageX + 10 + "px")
                        .style("top", event.pageY - 20 + "px")
                        .attr("data-year", d.year)
                        .html(`Year: ${d.year}<br>Month: ${d3.timeFormat("%B")(new Date(0).setUTCMonth(d.month - 1))}<br>Temp: ${(baseTemperature + d.variance).toFixed(2)}&deg;C`);
                })
                .on("mouseout", () => d3.select("#tooltip").style("display", "none"));

            const legend = d3.select("#legend");
            const legendWidth = 400;
            const legendHeight = 20;
            const legendColors = colorScale.ticks(6).map(colorScale);

            const legendScale = d3.scaleLinear()
                .domain(colorScale.domain())
                .range([0, legendWidth]);

            const legendAxis = d3.axisBottom(legendScale).ticks(6);

            const legendSvg = legend.append("svg")
                .attr("width", legendWidth)
                .attr("height", legendHeight + 30);

            legendSvg.selectAll("rect")
                .data(legendColors)
                .enter()
                .append("rect")
                .attr("x", (d, i) => i * (legendWidth / legendColors.length))
                .attr("y", 0)
                .attr("width", legendWidth / legendColors.length)
                .attr("height", legendHeight)
                .attr("fill", d => d);

            legendSvg.append("g")
                .attr("transform", `translate(0, ${legendHeight})`)
                .call(legendAxis);
        }
    </script>
</body>
</html>
